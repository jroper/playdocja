h1. OpenID の統合

"OpenID":http://openid.net/ は、オープンで非集中的な個人認証システムです。特別なユーザ情報を保持せずに、アプリケーションに新しいユーザを容易に迎え入れることができます。必要なのは、認証されたユーザを **OpenID** を通じて追跡し続けることだけです。

h2. <a>簡単な OpenID 認証の例</a>

この例では、Play アプリケーションにおいて OpenID 認証がどのように使われるのかを俯瞰します:

* すべてのリクエストにおいて、ユーザが接続されているかどうか確認します
* 接続されていない場合、OpenID を投稿することのできるページをを表示します
* ユーザを OpenID プロバイダにリダイレクトします
* ユーザが戻ってきたら、検証された OpenID を取得して HTTP セッションに保存します

**play.libs.OpenID** クラスで提供される OpenID の機能は、 "OpenID4Java":http://code.google.com/p/openid4java/ を使ってビルドされています。

bc. @Before(unless={"login", "authenticate"})
static void checkAuthenticated() {
    if(!session.contains("user")) {
        login();
    }
}
 
public static void index() {
    render("Hello %s!", session.get("user"));
}
     
public static void login() {
    render();
}
    
public static void authenticate(String user) {
    if(OpenID.isAuthenticationResponse()) {
        UserInfo verifiedUser = OpenID.getVerifiedID();
        if(verifiedUser == null) {
            flash.error("Oops. Authentication has failed");
            login();
        } 
        session.put("user", verifiedUser.id);
        index();
    } else {
        if(!OpenID.id(user).verify()) { // will redirect the user
            flash.error("Cannot verify your OpenID");
            login();
        } 
    }
}

続いて、 **login.html** テンプレートです:

bc. #{if flash.error}
<h1>${flash.error}</h1>
#{/if}
 
<form action="@{Application.authenticate()}" method="POST">
    <label for="user">What’s your OpenID?</label>
    <input type="text" name="user" id="user" />
    <input type="submit" value="login..." />
</form>
</code>

最後に、ルート定義です:

bc. GET   /                     Application.index
GET   /login                Application.login
*     /authenticate         Application.authenticate

